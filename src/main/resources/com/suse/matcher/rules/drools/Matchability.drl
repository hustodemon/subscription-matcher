package com.suse.matcher.rules.drools;

import java.util.List;

import com.suse.matcher.Drools;
import com.suse.matcher.facts.CentGroup;
import com.suse.matcher.facts.HostGuest;
import com.suse.matcher.facts.HostedProduct;
import com.suse.matcher.facts.InstalledProduct;
import com.suse.matcher.facts.PartialMatch;
import com.suse.matcher.facts.Product;
import com.suse.matcher.facts.Subscription;
import com.suse.matcher.facts.Subscription.Policy;
import com.suse.matcher.facts.SubscriptionProduct;
import com.suse.matcher.facts.System;

rule "matchPhysicalOnlySubscription"
    agenda-group "Matchability"
    when
        $system : System($systemId : id, physical == true)
        InstalledProduct($productId : productId, systemId == $systemId)
        SubscriptionProduct($subscriptionId : subscriptionId, productId == $productId)
        $subscription : Subscription(
            id == $subscriptionId,
            policy == Policy.PHYSICAL_ONLY,
            cpus >= $system.cpus,
            ignored == false
        )
    then
        int groupId = Drools.generateId($system.id, $productId, $subscription.id);
        insert(new CentGroup(groupId, 100));
        insert(new PartialMatch($system.id, $productId, $subscription.id, groupId, groupId));
end

rule "matchInstanceSubscription"
    agenda-group "Matchability"
    when
        $system : System($systemId : id)
        InstalledProduct($productId : productId, systemId == $systemId)
        SubscriptionProduct($subscriptionId : subscriptionId, productId == $productId)
        $subscription : Subscription(
            id == $subscriptionId,
            policy == Policy.INSTANCE,
            (cpus == null || cpus >= $system.cpus),
            ignored == false
        )
    then
        int groupId = Drools.generateId($system.id, $productId, $subscription.id);
        insert(new CentGroup(groupId, 100));
        insert(new PartialMatch($system.id, $productId, $subscription.id, groupId, groupId));
end

rule "matchUnlimitedVirtualizationSubscription"
    agenda-group "Matchability"
    when
        $system : System($systemId : id, physical == true, cpus != null)
        (
            InstalledProduct($productId : productId, systemId == $systemId) or
            HostedProduct($productId : productId, systemId == $systemId)
        )
        SubscriptionProduct($subscriptionId : subscriptionId, productId == $productId)
        $subscription : Subscription(
            id == $subscriptionId,
            policy == Policy.UNLIMITED_VIRTUALIZATION,
            (cpus >= $system.cpus || stackable == true),
            ignored == false
        )
    then
        Integer consumedQuantity = ($system.cpus + $subscription.cpus - 1) / $subscription.cpus;
        int groupId = Drools.generateId($system.id, $productId, $subscription.id);
        insert(new CentGroup(groupId, consumedQuantity * 100));
        insert(new PartialMatch($system.id, $productId, $subscription.id, groupId, groupId));
end

rule "matchFreeVirtualizationSubscription"
    agenda-group "Matchability"
    when
      PartialMatch($hostId : systemId, $productId : productId, $subscriptionId : subscriptionId)
      Subscription(id == $subscriptionId, policy == Policy.UNLIMITED_VIRTUALIZATION, ignored == false)
      HostGuest(hostId == $hostId, $guestId : guestId)
      InstalledProduct(systemId == $guestId, productId == $productId)
    then
      int groupId = Drools.generateId($hostId, $productId, $subscriptionId);
      int centGroupId = Drools.generateId($guestId, $productId, $subscriptionId);
      insert(new CentGroup(centGroupId, 0));
      insert(new PartialMatch($guestId, $productId, $subscriptionId, centGroupId, groupId));
end

rule "matchInheritedVirtualization"
    agenda-group "Matchability"
    no-loop
    when
        // for each base product
        Product($baseProductId : id, base == true)

        // for each installed add-on product with an IV subscription
        Subscription($addonSubscriptionId : id, policy == Policy.INHERITED_VIRTUALIZATION, ignored == false)
        SubscriptionProduct($addonProductId : productId, subscriptionId == $addonSubscriptionId)
        (
            InstalledProduct($systemId : systemId, productId == $addonProductId) or
            HostedProduct($systemId : systemId, productId == $addonProductId)
        )

        // for each match
        PartialMatch(
            $baseSubscriptionId : subscriptionId,
            $centGroupId : centGroupId,
            $baseGroupId : groupId,
            productId == $baseProductId,
            systemId == $systemId
        )
        CentGroup(id == $centGroupId, $cents : cents)
    then
        int addonGroupId = Drools.generateId($baseGroupId, $addonSubscriptionId);

        // CentGroup for partial match with base subscription
        int baseMatchCentGroupId = Drools.generateId("IV-Base", addonGroupId, $centGroupId);
        // CentGroup for partial match with addon subscription
        int addonMatchCentGroupId = Drools.generateId("IV-Addon", addonGroupId, $centGroupId);

        insert(new CentGroup(baseMatchCentGroupId, $cents));
        insert(new CentGroup(addonMatchCentGroupId, $cents));
        insert(new PartialMatch($systemId, $baseProductId, $baseSubscriptionId, baseMatchCentGroupId, addonGroupId));
        insert(new PartialMatch($systemId, $addonProductId, $addonSubscriptionId, addonMatchCentGroupId, addonGroupId));
end

rule "match12Subscription"
    agenda-group "Matchability"
    when
        // we want to explicitly bind 'physical' here as we want the rule to be reactivated on change of this attribute:
        $system : System($systemId : id, $physical : physical, cpus != null)
        InstalledProduct($productId : productId, systemId == $systemId)
        SubscriptionProduct($subscriptionId : subscriptionId, productId == $productId)
        $subscription : Subscription(
            id == $subscriptionId,
            policy == Policy.ONE_TWO,
            ignored == false
        )
        not (HostGuest(hostId == $systemId))
    then
        int groupId = Drools.generateId($systemId, $productId, $subscriptionId);
        if ($physical) {
            insert(new CentGroup(groupId, ($system.cpus + $subscription.cpus - 1) / $subscription.cpus * 100));
            insert(new PartialMatch($system.id, $productId, $subscription.id,
                groupId,
                groupId));
        }
        else {
            insert(new CentGroup(groupId, 50));
            insert(new PartialMatch($system.id, $productId, $subscription.id, groupId, groupId));
        }
end

rule "mergeCentGroupsInBundles"
    agenda-group "Matchability"
    when
        $pm : PartialMatch(
            $subId : subscriptionId,
            $centGroupId1 : centGroupId,
            $systemId : systemId,
            $productId : productId
        )
        Product(id == $productId, $prodClass1 : productClass, productClass != null)
        $pm2 : PartialMatch(
            subscriptionId == $subId,
            centGroupId > $centGroupId1,
            systemId == $systemId,
            productId != $productId,
            $centGroupId2 : centGroupId,
            $productId2 : productId
        )
        Product(id == $productId2, productClass != $prodClass1, productClass != null)

        $cg1 : CentGroup(id == $centGroupId1, $cents1 : cents)
        $cg2 : CentGroup(id == $centGroupId2, cents == $cents1)
    then
        //retract($cg2);
        modify($pm2) {
            setCentGroupId($cg1.id);
        }
end

