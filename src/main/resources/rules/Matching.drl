package com.suse.matcher.rules;

import com.suse.matcher.facts.Match;
import com.suse.matcher.facts.Match.Kind;
import com.suse.matcher.facts.Subscription;
import com.suse.matcher.facts.SubscriptionProduct;
import com.suse.matcher.facts.System;
import com.suse.matcher.facts.SystemProduct;

rule "match valid user-specified matches"
    agenda-group "Matching"
    salience 2
    when
        Match($systemId : systemId, $productId : productId, $subscriptionId : subscriptionId, $quantity: quantity, kind == Kind.USER_PINNED)
        Match(systemId == $systemId, productId == $productId, subscriptionId == $subscriptionId, quantity == $quantity, kind == Kind.POSSIBLE)
    then
        insert(new Match($systemId, $productId, $subscriptionId, 1, Kind.CONFIRMED));
end

rule "match non-stackable matches"
    agenda-group "Matching"
    salience $subscription.computeFitnessTo($system) // result in interval [0, 1]
    when
        // we have a system
        $system : System($systemId : id)
        // we have a non-stackable subscription with available slots
        $subscription : Subscription(
            $subscriptionId : id,
            $systemLimit : systemLimit,
            systemLimit > 0,
            stackable == false
        )

        // we have a possible match with a product
        Match(systemId == $systemId, $productId : productId, subscriptionId == $subscriptionId, kind == Kind.POSSIBLE)

        // and that product is provided by the subscription
        SubscriptionProduct(subscriptionId == $subscriptionId, productId == $productId)

        // unless other subscriptions have already been assigned
        not (Match(systemId == $systemId, kind == Kind.CONFIRMED))
    then
        insert(new Match($systemId, $productId, $subscriptionId, 1, Kind.CONFIRMED));
        modify($subscription) {
            systemLimit = $systemLimit -1
        }
end

rule "match stackable matches"
    // NOTE: the only stackable subscriptions are TWO_TWO and UNLIMITED_VIRTUAL after 2015
    agenda-group "Matching"
    salience $subscription.computeFitnessTo($system) // result in interval [0, 1]
    when
        // we have a physical system
        $system : System($systemId : id, physical)
        // we have a non-stackable subscription with enough slots
        $subscription : Subscription(
            $subscriptionId : id,
            $systemLimit : systemLimit,
            systemLimit * cpus >= $system.cpus,
            stackable == true
        )

        // we have a possible match with a product
        Match(systemId == $systemId, $productId : productId, subscriptionId == $subscriptionId, kind == Kind.POSSIBLE)

        // and that product is provided by the subscription
        SubscriptionProduct(subscriptionId == $subscriptionId, productId == $productId)

        // unless other subscriptions have already been assigned
        not (Match(systemId == $systemId, kind == Kind.CONFIRMED))
    then
        Integer quantity = ($system.cpus + $subscription.cpus - 1) / $subscription.cpus;
        insert(new Match($systemId, $productId, $subscriptionId, quantity, Kind.CONFIRMED));
        modify($subscription) {
            systemLimit = $systemLimit - quantity
        }
end
