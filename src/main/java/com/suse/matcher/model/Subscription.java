package com.suse.matcher.model;

import com.google.gson.annotations.SerializedName;
import com.suse.matcher.model.System;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.kie.api.definition.type.PropertyReactive;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

/**
 * An entitlement to use one or more {@link Product}s on one or more
 * {@link System}s.
 */
@PropertyReactive
public class Subscription {

    /** The id. */
    public String id;

    /** The type / description. */
    public String type;

    /** The part number */
    public String partnumber;

    /** The count. */
    @SerializedName("system_limit")
    public Integer systemLimit;

    /** Start Date */
    @SerializedName("starts_at")
    public Date startsAt;

    /** End Date */
    @SerializedName("expires_at")
    public Date expiresAt;

    /** the following facts are generated by the rule engine */

    /** CPUs / socket / IFLs: 0 means instance subscription */
    public Integer cpus;

    /** unlimited virtualization */
    public Boolean unlimitedVirtualization;

    /** stackable */
    public Boolean stackable;

    /** usable for products */
    public List<String> usableProductIds = new LinkedList<String>();

    /** support type */
    public String supportType;

    /** FIXME: needed? lifetime in years */
    public Integer lifetime;

    public Date getStartsAt() {
        return startsAt;
    }

    public void setStartsAt(String startsAt) {
        if (startsAt == null) {
            startsAt = "1970-01-01T00:00:00Z";
        }
        SimpleDateFormat format = new SimpleDateFormat();
        format.applyPattern("yyyy-MM-ddTHH:mm:ssZ");
        try {
            this.startsAt = format.parse(startsAt);
        }
        catch (ParseException e) {
            // ignore
        }
    }

    public Date getExpiresAt() {
        return expiresAt;
    }

    public void setExpiresAt(String expiresAt) {
        if (expiresAt == null) {
            expiresAt = "2100-12-31T23:59:59Z";
        }
        SimpleDateFormat format = new SimpleDateFormat();
        format.applyPattern("yyyy-MM-ddTHH:mm:ssZ");
        try {
            this.expiresAt = format.parse(expiresAt);
        }
        catch (ParseException e) {
            // ignore
        }
    }

    public Boolean isInstanceSubscription() {
        return (cpus == 0);
    }

    public Boolean matchAnyProductOnSystem(System s) {
        for (String p : s.productIds) {
            if (usableProductIds.contains(p)) {
                return true;
            }
        }
        return false;
    }

    /** {@inheritDoc} */
    @Override
    public int hashCode() {
        return HashCodeBuilder.reflectionHashCode(this);
    }

    /** {@inheritDoc} */
    @Override
    public boolean equals(Object objIn) {
        return EqualsBuilder.reflectionEquals(this, objIn);
    }

    public String toString() {
        return "Subscription[" + id + "]";
    }

}
