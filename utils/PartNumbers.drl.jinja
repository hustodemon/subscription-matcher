package com.suse.matcher.rules;

import com.suse.matcher.facts.Subscription;
import com.suse.matcher.facts.Subscription.Policy;
import com.suse.matcher.facts.System;

{% for item in obj -%}
//{{ item.desc }}
rule "Add subscription data for part number {{ item.pnum }}"
    {% if item.quantityFactor %}
    no-loop
    {% endif %}
    when
        {% if item.quantityFactor %}
        $subscription : Subscription($quantity : quantity, partNumber == "{{ item.pnum }}")
        {% else %}
        $subscription : Subscription(partNumber == "{{ item.pnum }}")
        {% endif %}
    then
        modify($subscription) {
        {% if item.virt == "UV" %}
            policy = Policy.UNLIMITED_VIRTUALIZATION,
        {% elif item.virt == "PHY" %}
            policy = Policy.PHYSICAL_ONLY,
        {% elif item.virt == "INST" %}
            policy = Policy.INSTANCE,
        {% elif item.virt == "2=2" %}
            policy = Policy.TWO_TWO,
        {% endif %}
        {% if item.supp == "BS" %}
            supportLevel = "basic",
        {% elif item.supp == "ST" %}
            supportLevel = "standard",
        {% elif item.supp == "L3ST" %}
            supportLevel = "l3-standard",
        {% elif item.supp == "PR" %}
            supportLevel = "priority",
        {% elif item.supp == "L3PR" %}
            supportLevel = "l3-priority",
        {% endif %}
        {% if item.cpu %}
            cpus = {{ item.cpu }},
        {% endif %}
        {% if item.quantityFactor %}
          {% if item.quantityFactor == "-1" %}
            quantity = Integer.MAX_VALUE,
          {% else %}
            quantity = $quantity * {{ item.quantityFactor }},
          {% endif %}
        {% endif %}
        {% if item.stack == "S" %}
            stackable = true
        {% else %}
            stackable = false
        {% endif %}
        };
end

{% endfor %}
