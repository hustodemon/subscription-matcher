package com.suse.matcher.rules;

import java.util.List;

import com.suse.matcher.facts.Match;
import com.suse.matcher.facts.Match.Kind;
import com.suse.matcher.facts.Subscription;
import com.suse.matcher.facts.SubscriptionProduct;
import com.suse.matcher.facts.System;
import com.suse.matcher.facts.SystemProduct;

rule "physical only subscription can match a system"
    agenda-group "Matchability"
    when
        $system : System($systemId : id, physical)
        SystemProduct($productId : productId, systemId == $systemId)
        SubscriptionProduct($subscriptionId : subscriptionId, productId == $productId)
        $subscription : Subscription(
            id == $subscriptionId,
            virtualizationPolicy == Subscription.PHYSICAL_ONLY,
            cpus >= $system.cpus
        )
    then
        insert(new Match($system.id, $subscription.id, $productId, 1, Kind.POSSIBLE));
end

rule "unlimited virtualization subscription can match a system"
    agenda-group "Matchability"
    when
        $system : System($systemId : id, physical)
        SystemProduct($productId : productId, systemId == $systemId)
        SubscriptionProduct($subscriptionId : subscriptionId, productId == $productId)
        $subscription : Subscription(
            id == $subscriptionId,
            virtualizationPolicy == Subscription.UNLIMITED_VIRTUALIZATION,
            (cpus >= $system.cpus || stackable)
        )
    then
        insert(new Match($system.id, $subscription.id, $productId, 1, Kind.POSSIBLE));
end
