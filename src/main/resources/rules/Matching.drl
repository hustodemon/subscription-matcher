package com.suse.matcher.rules;

import com.suse.matcher.facts.Match;
import com.suse.matcher.facts.Match.Kind;
import com.suse.matcher.facts.Subscription;
import com.suse.matcher.facts.SubscriptionProduct;
import com.suse.matcher.facts.System;
import com.suse.matcher.facts.SystemProduct;

rule "match valid user-specified matches"
    agenda-group "Matching"
    salience 2
    when
        Match($systemId : systemId, $subscriptionId : subscriptionId, $productId : productId, $quantity: quantity, kind == Kind.USER_PINNED)
        Match(systemId == $systemId, subscriptionId == $subscriptionId, productId == $productId, quantity == $quantity, kind == Kind.POSSIBLE)
    then
        insert(new Match($systemId, $subscriptionId, $productId, $quantity, Kind.CONFIRMED));
end

rule "match valid matches"
    agenda-group "Matching"
    salience $subscription.computeFitnessTo($system) // result in interval [0, 1]
    when
        $system : System($systemId : id)
        SystemProduct($productId : productId, systemId == $systemId)
        SubscriptionProduct($subscriptionId : subscriptionId, productId == $productId)
        Match(systemId == $systemId, subscriptionId == $subscriptionId, kind == Kind.POSSIBLE)
        $subscription : Subscription($systemLimit : systemLimit, id == $subscriptionId, systemLimit > 0)
        not (Match(systemId == $systemId, kind == Kind.CONFIRMED))
    then
        insert(new Match($systemId, $subscriptionId, $productId, 1, Kind.CONFIRMED));
        modify($subscription) {
            systemLimit = $systemLimit -1
        }
end
