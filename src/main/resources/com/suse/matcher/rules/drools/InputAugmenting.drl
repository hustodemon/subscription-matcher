package com.suse.matcher.rules.drools;

import com.suse.matcher.Drools;
import com.suse.matcher.facts.HostedProduct;
import com.suse.matcher.facts.HostGuest;
import com.suse.matcher.facts.InstalledProduct;
import com.suse.matcher.facts.PenaltyGroup;
import com.suse.matcher.facts.Subscription;
import com.suse.matcher.facts.SubscriptionProduct;
import com.suse.matcher.facts.System;
import com.suse.matcher.facts.VirtualizationGroupMember;

rule "generateHostedProduct"
    agenda-group "InputAugmenting"
    when
        System($systemId : id, physical == false)
        InstalledProduct(systemId == $systemId, $productId : productId)
        HostGuest($hostId : hostId, guestId == $systemId)
    then
        insert(new HostedProduct($hostId, $productId));
end

rule "generatePenaltyGroupsFromVirtualizationGroups"
    agenda-group "InputAugmenting"
    when
        VirtualizationGroupMember($virtualizationGroupId : virtualizationGroupId, $guestId : guestId)
    then
        insert(new PenaltyGroup($virtualizationGroupId, $guestId));
end

rule "generatePenaltyGroups"
    agenda-group "InputAugmenting"
    when
        HostGuest($hostId : hostId, $guestId : guestId)
        not VirtualizationGroupMember(guestId == $guestId)
    then
        int penaltyGroupId = Drools.generateId("host_guest", $hostId);
        insert(new PenaltyGroup(penaltyGroupId, $guestId));
end

rule "markHardBundledSubscriptions"
    agenda-group "InputAugmenting"
    when
        // two subscriptions with different product sets, but otherwise identical, are by definition hard bundled
        $s1 : Subscription(ignored == false)
        $s2 : Subscription(ignored == false, partNumber == $s1.partNumber, id > $s1.id, startDate == $s1.startDate, endDate == $s1.endDate, quantity == $s1.quantity)
        (
            SubscriptionProduct($productId : productId, subscriptionId == $s1.id) and
            not SubscriptionProduct(productId == $productId, subscriptionId == $s2.id)
        ) or
        (
            SubscriptionProduct($productId : productId, subscriptionId == $s2.id) and
            not SubscriptionProduct(productId == $productId, subscriptionId == $s1.id)
        )
    then
        int hardBundleId = Drools.generateId($s1.partNumber, $s1.startDate, $s1.endDate, $s1.quantity);
        modify($s1) {
            hardBundleId = hardBundleId;
        }
        modify($s2) {
            hardBundleId = hardBundleId;
        }
end

// todo maybe a separate agenda "ConvertOldStyleHbs", or so
rule "fakeProductClassesHB"
    agenda-group "InputAugmenting"
    when
        $sub : Subscription(ignored == false, hardBundleId != null, $sid : id)
        SubscriptionProduct(subscriptionId == $sid, $prodId : productId)
        $prod : Product(productClass == null, id == $prodId)
    then
        if ($prod.productClass == null) { // todo ! why is this needed? ^^^ should be enough!!!!!!
            modify($prod) {
                productClass = "generated-product-class-" + $sid.toString();
            }
        }
end

// todo maybe a separate agenda "ConvertOldStyleHbs", or so
rule "mergeHbProducts" // todo works also for more subs than 2?
    agenda-group "InputAugmenting"
    when
        Subscription(ignored == false, hardBundleId != null, $sub1HBid : hardBundleId, $id : id)
        $subToRetract : Subscription(id > $id, hardBundleId == $sub1HBid)
        $subProd : SubscriptionProduct(subscriptionId == $subToRetract.id);
    then
        java.lang.System.out.println("merging subscription-product " + $subProd);
        modify($subProd) {
            subscriptionId = $id;
        }
        java.lang.System.out.println("merged subscription-product " + $subProd);
end

// todo maybe a separate agenda "ConvertOldStyleHbs", or so
rule "removeRedundantSubs"
    agenda-group "InputAugmenting"
    when
        $subToKeep: Subscription(ignored == false, hardBundleId != null, $sub1HBid : hardBundleId, $id : id)
        $subToRetract : Subscription(id > $id, hardBundleId == $sub1HBid)
    then
        java.lang.System.out.println("retracting " + $subToRetract);
        modify($subToKeep) {
            name += " + " + $subToRetract.name;
        }
        retract($subToRetract);
end

