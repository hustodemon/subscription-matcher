package com.suse.matcher.rules.drools;

import com.suse.matcher.Drools;
import com.suse.matcher.facts.HostedProduct;
import com.suse.matcher.facts.HostGuest;
import com.suse.matcher.facts.InstalledProduct;
import com.suse.matcher.facts.PenaltyGroup;
import com.suse.matcher.facts.Subscription;
import com.suse.matcher.facts.SubscriptionProduct;
import com.suse.matcher.facts.System;
import com.suse.matcher.facts.VirtualizationGroupMember;

rule "generateHostedProduct"
    agenda-group "InputAugmenting"
    when
        System($systemId : id, physical == false)
        InstalledProduct(systemId == $systemId, $productId : productId)
        HostGuest($hostId : hostId, guestId == $systemId)
    then
        insert(new HostedProduct($hostId, $productId));
end

rule "generatePenaltyGroupsFromVirtualizationGroups"
    agenda-group "InputAugmenting"
    when
        VirtualizationGroupMember($virtualizationGroupId : virtualizationGroupId, $guestId : guestId)
    then
        insert(new PenaltyGroup($virtualizationGroupId, $guestId));
end

rule "generatePenaltyGroups"
    agenda-group "InputAugmenting"
    when
        HostGuest($hostId : hostId, $guestId : guestId)
        not VirtualizationGroupMember(guestId == $guestId)
    then
        int penaltyGroupId = Drools.generateId("host_guest", $hostId);
        insert(new PenaltyGroup(penaltyGroupId, $guestId));
end

rule "markHardBundledSubscriptions"
    agenda-group "InputAugmenting"
    when
        // two subscriptions with different product sets, but otherwise identical, are by definition hard bundled
        $s1 : Subscription(ignored == false)
        $s2 : Subscription(ignored == false, partNumber == $s1.partNumber, id > $s1.id, startDate == $s1.startDate, endDate == $s1.endDate, quantity == $s1.quantity)
        (
            SubscriptionProduct($productId : productId, subscriptionId == $s1.id) and
            not SubscriptionProduct(productId == $productId, subscriptionId == $s2.id)
        ) or
        (
            SubscriptionProduct($productId : productId, subscriptionId == $s2.id) and
            not SubscriptionProduct(productId == $productId, subscriptionId == $s1.id)
        )
    then
        int hardBundleId = Drools.generateId($s1.partNumber, $s1.startDate, $s1.endDate, $s1.quantity);
        modify($s1) {
            hardBundleId = hardBundleId;
        }
        modify($s2) {
            hardBundleId = hardBundleId;
        }
end

rule "generateSuperProductForMgmt"
    agenda-group "InputAugmenting"
    when
        $product : Product(id == 1076 || id == 1078)
    then
        Product product = new Product(new Long(-666), "SUMA Lifecycle Mgmt", $product.productClass,
            $product.free, $product.base);
        java.lang.System.out.println("inserting new superproduct for Mgmt: " + product);
        insert(product);
end

rule "generateSuperProductForProv"
    agenda-group "InputAugmenting"
    when
        $product : Product(id == 1097 || id == 1204)
    then
        Product product = new Product(new Long(-667), "SUMA Lifecycle Prov", $product.productClass,
            $product.free, $product.base);
        java.lang.System.out.println("inserting new superproduct for Prov: " + product);
        insert(product);
end

rule "boostSubscriptionsWithMgmtSuperProduct"
    agenda-group "InputAugmenting"
    when
        SubscriptionProduct($sid : subscriptionId, productId == 1076 || productId == 1078)
    then
        java.lang.System.out.println("boosting subscription " + $sid + " with new superproduct for Mgmt.");
        insert(new SubscriptionProduct($sid, new Long(-666)));
end

rule "boostSubscriptionsWithProvSuperProduct"
    agenda-group "InputAugmenting"
    when
        SubscriptionProduct($sid : subscriptionId, productId == 1097 || productId == 1204)
    then
        java.lang.System.out.println("boosting subscription " + $sid + " with new superproduct for Prov.");
        insert(new SubscriptionProduct($sid, new Long(-667)));
end

// fake installed products too
rule "replaceMgmtSuperproductForSystems"
    agenda-group "InputAugmenting"
    when
        $ip : InstalledProduct(productId == 1076 || productId == 1078)
    then
        java.lang.System.out.println("Adding faked installed Mgmt prod to system " + $ip.systemId + " and retracting prod " + $ip.productId);
        insert(new InstalledProduct($ip.systemId, new Long(-666)));
        retract($ip);
end
rule "replaceProvSuperproductForSystems"
    agenda-group "InputAugmenting"
    when
        $ip : InstalledProduct(productId == 1097 || productId == 1204)
    then
        java.lang.System.out.println("Adding faked installed Prov prod to system " + $ip.systemId + " and retracting prod " + $ip.productId);
        insert(new InstalledProduct($ip.systemId, new Long(-667)));
        retract($ip);
end

// fake hostedproducts too
rule "replaceMgmtSuperproductForHosts"
    agenda-group "InputAugmenting"
    when
        $hp : HostedProduct(productId == 1076 || productId == 1078)
    then
        java.lang.System.out.println("Adding faked hosted Mgmt prod to system " + $hp.systemId + " and retracting prod " + $hp.productId);
        insert(new HostedProduct($hp.systemId, new Long(-666)));
        retract($hp);
end

rule "replaceProvSuperproductForHosts"
    agenda-group "InputAugmenting"
    when
        $hp : HostedProduct(productId == 1097 || productId == 1204)
    then
        java.lang.System.out.println("Adding faked hosted Prov prod to system " + $hp.systemId + " and retracting prod " + $hp.productId);
        insert(new HostedProduct($hp.systemId, new Long(-667)));
        retract($hp);
end
